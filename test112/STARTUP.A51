ORG 0000H
SJMP INIT
ORG 0003H
SJMP INT0_ISR
ORG 0030H
INIT:
		MOV IE #81H
		MOV SP #31H
		CLR IT0
		SETB RS0
		MOV R0, #0
		MOV R1, #0
		MOV R2, #0
MAIN:
		CLR RS0
		MOV R0, #0
		MOV R1, #4
		MOV R2, #0F7H
SCAN:
		SETB P3.3
		MOV A, R2
		MOV P2, A
		JNB P3.3, EQUAL
		JNB P2.7, KEY_IN
		INC R0
		JNB P2.6, KEY_IN
		INC R0
		JNB P2.5, KEY_IN
		INC R0
		JNB P2.4, KEY_IN
		INC R0
		RR A
		MOV R2, A
		DJNZ R1, SCAN
KEY_OUT:
		ACALL DISPLAY
		SJMP MAIN
KEY_IN:
		ACALL DEBOUNCE
		MOV DPTR, #KB_TABLE
		MOV A, R0
		MOVC A, @A+DPTR
		CJNE A, #0AH, NEXT1
		SJMP OP_IN
NEXT1:
		CJNE A, #0BH, NEXT2
		SJMP OP_IN
NEXT2:
		CJNE A, #0CH, NEXT3
		SJMP OP_IN
NEXT3:
		CJNE A, #0DH, NEXT4
		SJMP OP_IN
NEXT4:
		CJNE A, #0EH, NEXT5
		SJMP L_BRACKETS
NEXT5:
		CJNE A, #0FH, NEXT6
		SJMP R_BRACKETS
NEXT6:
		SJMP SAVE_IN
L_BRACKETS:
		SETB RS0
		MOV R0, #0
		MOV R1, #0
		MOV R2, #0
		SJMP KEY_OUT
R_BRACKETS:
		SETB RS0
		POP 0EH
		POP 0DH
		POP 0CH
		ACALL CAL
		PUSH 0BH
		MOV R0, #0
		MOV R1, #0
		MOV R2, #0
		SJMP KEY_OUT
OP_IN:
		SETB RS0
		PUSH 0E0H
		CLR 00H
		MOV R0, #0
		MOV R1, #0
		MOV R2, #0
		SJMP KEY_OUT
EQUAL:
		ACALL DEBOUNCE
		SETB RS0
		MOV A, SP
		CJNE A, 031H, POP_CAL
		POP 0BH
		ACALL SET_DIGITS
		SJMP KEY_OUT
SAVE_IN:
		SETB RS0
		MOV R7, A
		MOV A, R1
		MOV R0, A
		MOV A, R2
		MOV R1, A
		MOV A, R7
		MOV R2, A
		MOV A, R0
		MOV B, #100
		MUL AB
		MOV B, R3
		ADD A, B
		MOV B, R2
		ADD A, B
		MOV R3, A
		JNB 00H, SKIP_REFRESH
		MOV A, SP
		SUBB A, 01H
		MOV SP, A
SKIP_REFRESH:
		PUSH 0BH
		SETB 00H
		SJMP KEY_OUT
POP_CAL:
		POP 0EH
		POP 0DH
		POP 0CH
		ACALL CAL
		PUSH 0BH
		SJMP KEY_OUT
CAL:
		MOV A, R4
		MOV B, R6
		CJNE R5, #0AH, SUB_CAL
		ADD A, B
		MOV R3, A
		ACALL SET_DIGITS
		RET
SUB_CAL:
		CJNE R5, 0BH, MUL_CAL
		SUBB A, B
		MOV R3, A
		ACALL SET_DIGITS
		RET
MUL_CAL:
		CJNE R5, 0CH, DIV_CAL
		MUL A, B
		MOV R3, A
		ACALL SET_DIGITS
		RET
DIV_CAL:
		DIV AB
		MOV R3, A
		ACALL SET_DIGITS
		RET
DEBOUNCE:
		MOV R5, #3
		